/**
 * Redux Toolkit Store
 * 
 * This file demonstrates the use of Redux Toolkit to simplify Redux setup.
 * 
 * Key Concepts:
 * - `createSlice`: Combines actions and reducers in one place, reducing boilerplate.
 * - `configureStore`: Simplifies store creation and includes middleware and DevTools by default.
 * - Benefits of Redux Toolkit:
 *   1. Less boilerplate compared to traditional Redux.
 *   2. Built-in support for immutable updates.
 *   3. Includes Redux DevTools and middleware by default.
 */

import { configureStore, createSlice } from '@reduxjs/toolkit';

/**
 * Redux Toolkit Simplification:
 * - Redux Toolkit simplifies the process of setting up and managing Redux.
 * - It provides utilities like `createSlice` and `configureStore` to reduce boilerplate code.
 * - Benefits:
 *   1. Less boilerplate compared to traditional Redux.
 *   2. Built-in support for immutable updates.
 *   3. Includes Redux DevTools and middleware by default.
 * - Use it when you want to simplify Redux setup and avoid manual configuration.
 */

// Create a slice: Combines actions and reducers in one place
const counterSlice = createSlice({
  name: 'counter', // Name of the slice
  initialState: { value: 0 }, // Initial state
  reducers: {
    increment: (state) => {
      state.value += 1; // Increment the counter
    },
    decrement: (state) => {
      state.value -= 1; // Decrement the counter
    },
    reset: (state) => {
      state.value = 0; // Reset the counter
    },
  },
});

// Export actions generated by createSlice
export const { increment, decrement, reset } = counterSlice.actions;

// Configure the store with the slice reducer
const store = configureStore({
  reducer: {
    counter: counterSlice.reducer, // Add the counter slice reducer
  },
});

export default store;
