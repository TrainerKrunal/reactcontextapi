### Redux Notes: Simplified Explanation

Redux is a state management library that helps manage the state of your application in a predictable way. It is especially useful for large applications where managing state across multiple components can become complex.

---

### Key Concepts:

1. **Store**:
   - The **store** is the single source of truth for your application's state.
   - It holds the entire state tree of your app.

2. **Actions**:
   - **Actions** are plain JavaScript objects that describe what you want to do (e.g., add a todo, increment a counter).
   - Example:
     ```javascript
     const ADD_TODO = 'ADD_TODO';
     const addTodo = (todo) => ({ type: ADD_TODO, payload: todo });
     ```

3. **Reducer**:
   - A **reducer** is a pure function that takes the current state and an action, and returns the new state.
   - Example:
     ```javascript
     const initialState = { todos: [] };
     const todoReducer = (state = initialState, action) => {
       switch (action.type) {
         case 'ADD_TODO':
           return { ...state, todos: [...state.todos, action.payload] };
         default:
           return state;
       }
     };
     ```

4. **Dispatch**:
   - The **dispatch** function is used to send actions to the store.
   - Example:
     ```javascript
     dispatch(addTodo({ id: 1, text: 'Learn Redux' }));
     ```

---

### Redux Toolkit:
Redux Toolkit simplifies Redux setup by reducing boilerplate code. It provides utilities like `createSlice` and `configureStore`.

1. **`createSlice`**:
   - Combines actions and reducers in one place.
   - Example:
     ```javascript
     const counterSlice = createSlice({
       name: 'counter',
       initialState: { value: 0 },
       reducers: {
         increment: (state) => { state.value += 1; },
         decrement: (state) => { state.value -= 1; },
       },
     });
     export const { increment, decrement } = counterSlice.actions;
     ```

2. **`configureStore`**:
   - Simplifies store creation and includes middleware and DevTools by default.
   - Example:
     ```javascript
     const store = configureStore({ reducer: { counter: counterSlice.reducer } });
     ```

---

### Async Logic with Redux Toolkit:
Redux Toolkit provides `createAsyncThunk` to handle asynchronous operations like API calls.

1. **`createAsyncThunk`**:
   - Automatically handles pending, fulfilled, and rejected states.
   - Example:
     ```javascript
     const fetchCounter = createAsyncThunk('counter/fetchCounter', async () => {
       const response = await fetch('/api/counter');
       return response.data;
     });
     ```

2. **`extraReducers`**:
   - Used to handle additional actions in a slice.
   - Example:
     ```javascript
     const counterSlice = createSlice({
       name: 'counter',
       initialState: { value: 0, status: 'idle' },
       extraReducers: (builder) => {
         builder
           .addCase(fetchCounter.pending, (state) => { state.status = 'loading'; })
           .addCase(fetchCounter.fulfilled, (state, action) => {
             state.status = 'succeeded';
             state.value = action.payload;
           });
       },
     });
     ```

---

### Redux-Specific Hooks:

1. **`useSelector`**:
   - Extracts data from the Redux store state.
   - Example:
     ```javascript
     const todos = useSelector((state) => state.todos);
     ```
   - This retrieves the `todos` array from the Redux store.

2. **`useDispatch`**:
   - Provides a way to dispatch actions to the Redux store.
   - Example:
     ```javascript
     const dispatch = useDispatch();
     dispatch(addTodo({ id: 1, text: 'Learn Redux' }));
     ```
   - This dispatches an action to add a new todo.

3. **`useStore`**:
   - Gives direct access to the Redux store instance.
   - Example:
     ```javascript
     const store = useStore();
     console.log(store.getState());
     ```
   - This logs the current state of the Redux store.

---

### Components in Your Project:

1. **`ToDoList`**:
   - Demonstrates basic Redux with actions and reducers.
   - Allows adding and removing todos.

2. **`Counter`**:
   - Demonstrates Redux Toolkit with `createSlice`.
   - Allows incrementing, decrementing, and resetting a counter.

3. **`AsyncCounter`**:
   - Demonstrates async logic with `createAsyncThunk`.
   - Fetches an initial counter value from a mock API and allows incrementing and decrementing.

---

### Summary:
- **Redux Basics**:
  - Store, Actions, Reducers, Dispatch.
- **Redux Toolkit**:
  - Simplifies Redux with `createSlice` and `configureStore`.
- **Async Logic**:
  - Use `createAsyncThunk` for handling API calls.
- **Redux-Specific Hooks**:
  - `useSelector`, `useDispatch`, and `useStore` for interacting with the Redux store.
