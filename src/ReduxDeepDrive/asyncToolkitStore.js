import { createSlice, createAsyncThunk, configureStore } from '@reduxjs/toolkit';

/**
 * Async Logic with `createAsyncThunk`:
 * - `createAsyncThunk` simplifies handling async logic like API calls in Redux Toolkit.
 * - It automatically dispatches actions for pending, fulfilled, and rejected states.
 * - Use it when you need to handle async operations like fetching data from an API.
 */

// Mock API call to fetch the initial counter value
export const fetchCounter = createAsyncThunk('asyncCounter/fetchCounter', async () => {
  const response = await new Promise((resolve) =>
    setTimeout(() => resolve({ data: 10 }), 1000) // Simulate a delay and return a value
  );
  return response.data; // Return the fetched counter value
});

// Create a slice for the async counter
const asyncCounterSlice = createSlice({
  name: 'asyncCounter', // Name of the slice
  initialState: {
    value: 0, // Initial counter value
    status: 'idle', // Status of the async operation (idle, loading, succeeded, failed)
  },
  reducers: {
    increment: (state) => {
      state.value += 1; // Increment the counter
    },
    decrement: (state) => {
      state.value -= 1; // Decrement the counter
    },
  },
  extraReducers: (builder) => {
    builder
      .addCase(fetchCounter.pending, (state) => {
        state.status = 'loading'; // Set status to loading when the async operation starts
      })
      .addCase(fetchCounter.fulfilled, (state, action) => {
        state.status = 'succeeded'; // Set status to succeeded when the async operation completes
        state.value = action.payload; // Update the counter value with the fetched data
      })
      .addCase(fetchCounter.rejected, (state) => {
        state.status = 'failed'; // Set status to failed if the async operation fails
      });
  },
});

// Export actions generated by createSlice
export const { increment, decrement } = asyncCounterSlice.actions;

// Configure the store with the async counter slice reducer
const asyncToolkitStore = configureStore({
  reducer: {
    asyncCounter: asyncCounterSlice.reducer, // Add the async counter slice reducer
  },
});

export default asyncToolkitStore;
